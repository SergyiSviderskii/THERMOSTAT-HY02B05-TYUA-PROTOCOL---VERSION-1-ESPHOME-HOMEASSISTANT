# THERMOSTAT HY02B05 TYUA (tywe3s)) PROTOCOL VERSION 1
esphome:
  name: "$hostname"
  name_add_mac_suffix: true
  includes:
    - thermostats-tuya.h    


esp8266:
  board: esp01_1m
  restore_from_flash: true   
  
  
# Enable logging
logger:
  level: NONE
  #level: VERBOSE 
  baud_rate: 0 
  esp8266_store_log_strings_in_flash: false 


# Enable Home Assistant API
api:
  encryption:
    key: "$key_api"

ota:
  password: "$password_ota"
 
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  use_address: $wifi_use_address
     
  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:

    
    
#captive_portal:
  

#web_server:
 #port: 80     


uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600 
  id: uart_bus


globals:
  - id: my_global_mode
    type: int
    restore_value: true


climate:
- platform: custom
  lambda: |-
    auto my_custom_climate = new MyCustomClimate();
    App.register_component(my_custom_climate);
    return {my_custom_climate};
    
  climates:
    - name: "${device_verbose_name}"  
      id: my_custom_climate
      
    
custom_component:
    lambda: |-
      auto my_custom = new TuComponent(id(uart_bus));
      return {my_custom};
  
      
number:
  - platform: template
    name: "${device_verbose_name}_vacation_days"
    id: number_vacation_days
    unit_of_measurement: days
    icon: mdi:calendar-month
    update_interval: never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 104;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }   
    min_value: 1
    max_value: 30
    step: 1
    mode: box  

  - platform: template
    name: "${device_verbose_name}_vacation_temperature"       
    id: number_vacation_temperature
    unit_of_measurement: °C
    icon: mdi:thermometer
    update_interval: never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 105;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }     
    min_value: 1
    max_value: 70
    step: 1
    mode: box  
    
  - platform: template
    name: "${device_verbose_name}_calibration_sensor" 
    id: number_calibration_sensor
    unit_of_measurement: °C
    icon: mdi:thermometer-lines 
    update_interval:  never 
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 109; 
              sending.valueapi = x * 10;
              sending_sensor = sending;  
            } else {
              reception.reset();
            }     
    min_value: -9
    max_value: 9
    step: 1
    mode: box

  - platform: template
    name: "${device_verbose_name}_working_hysteresis"  
    id: number_working_hysteresis
    unit_of_measurement: °C
    icon: mdi:thermometer
    update_interval:  never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 110;
              sending.valueapi = x * 10;
              sending_sensor = sending;
            } else {
              reception.reset();
            }    
    min_value: 0.5
    max_value: 2.5
    step: 0.5
    mode: box    

  - platform: template
    name: "${device_verbose_name}_high_hysteresis_external"
    id: number_high_hysteresis_external
    unit_of_measurement: °C
    icon: mdi:thermometer
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 111;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }    
    min_value: 1
    max_value: 9
    step: 1
    mode: box
        
  - platform: template
    name: "${device_verbose_name}_high_external"
    id: number_high_external
    unit_of_measurement: °C
    icon: mdi:thermometer-chevron-up
    update_interval:  never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 112;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }    
    min_value: 20
    max_value: 70
    step: 1
    mode: box

  - platform: template
    name: "${device_verbose_name}_low_external"
    id: number_low_external
    unit_of_measurement: °C
    icon: mdi:thermometer-chevron-down
    update_interval:  never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 113;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }     
    min_value: 1
    max_value: 10
    step: 1
    mode: box     
    
  - platform: template
    name: "${device_verbose_name}_max_temperature"
    id: number_max_temperature  
    unit_of_measurement: °C
    icon: mdi:thermometer-high   
    update_interval:  never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 114;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }     
    min_value: 20
    max_value: 70
    step: 1
    mode: box
                               
  - platform: template
    name: "${device_verbose_name}_min_temperature"
    id: number_min_temperature   
    unit_of_measurement: °C
    icon: mdi:thermometer-low
    update_interval:  never  
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 115;
              sending.valueapi = x;
              sending_sensor = sending;
            } else {
              reception.reset();
            }            
    min_value: 1
    max_value: 10
    step: 1
    mode: box
    
  - platform: template
    name: "${device_verbose_name}_hour_1"
    id: number_hour_1
    unit_of_measurement: h
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 0;
              id(cansel).turn_on();
            }    
    min_value: 0
    max_value: 23
    step: 1
    mode: box           
    
  - platform: template
    name: "${device_verbose_name}_minutes_1"
    id: number_minutes_1
    unit_of_measurement: m
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 1;
              id(cansel).turn_on();
            }    
    min_value: 0
    max_value: 59
    step: 1 
    mode: box   

  - platform: template
    name: "${device_verbose_name}_temperature_1"
    id: number_temperature_1
    unit_of_measurement: °C
    icon: mdi:thermometer-auto
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 2;
              id(cansel).turn_on();
            }    
    min_value: 1
    max_value: 70
    step: 1 
    mode: box          
        
  - platform: template
    name: "${device_verbose_name}_hour_2"
    id: number_hour_2
    unit_of_measurement: h
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 3;
              id(cansel).turn_on();
            }                                                                           
    min_value: 0
    max_value: 23  
    step: 1 
    mode: box
    
  - platform: template
    name: "${device_verbose_name}_minutes_2"
    id: number_minutes_2
    unit_of_measurement: m
    icon: mdi:clock-time-one 
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 4;
              id(cansel).turn_on();
            }     
    min_value: 0
    max_value: 59
    step: 1 
    mode: box
     
  - platform: template
    name: "${device_verbose_name}_temperature_2"
    id: number_temperature_2
    unit_of_measurement: °C
    icon: mdi:thermometer-auto
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 5;
              id(cansel).turn_on();
            }     
    min_value: 1
    max_value: 70
    step: 1
    mode: box
    
  - platform: template
    name: "${device_verbose_name}_hour_3"
    id: number_hour_3
    unit_of_measurement: h
    icon: mdi:clock-time-one 
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 6;
              id(cansel).turn_on();
            }      
    min_value: 0
    max_value: 23  
    step: 1 
    mode: box
    
  - platform: template
    name: "${device_verbose_name}_minutes_3"
    id: number_minutes_3
    unit_of_measurement: m
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 7;
              id(cansel).turn_on();
            }     
    min_value: 0
    max_value: 59
    step: 1 
    mode: box
     
  - platform: template
    name: "${device_verbose_name}_temperature_3"
    id: number_temperature_3
    unit_of_measurement: °C
    icon: mdi:thermometer-auto
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 8;
              id(cansel).turn_on();
            }       
    min_value: 1
    max_value: 70
    step: 1
    mode: box 
    
  - platform: template
    name: "${device_verbose_name}_hour_4"
    id: number_hour_4
    unit_of_measurement: h
    icon: mdi:clock-time-one  
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 9;
              id(cansel).turn_on();
            }    
    min_value: 0
    max_value: 23
    step: 1
    mode: box           

  - platform: template
    name: "${device_verbose_name}_minutes_4"
    id: number_minutes_4
    unit_of_measurement: m
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 10;
              id(cansel).turn_on();
            }    
    min_value: 0
    max_value: 59
    step: 1 
    mode: box

  - platform: template
    name: "${device_verbose_name}_temperature_4"
    id: number_temperature_4
    unit_of_measurement: °C
    icon: mdi:thermometer-auto
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 11;
              id(cansel).turn_on();
            }    
    min_value: 1
    max_value: 70
    step: 1 
    mode: box 
   
  - platform: template
    name: "${device_verbose_name}_hour_5"
    id: number_hour_5
    unit_of_measurement: h
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 12;
              id(cansel).turn_on();
            }    
    min_value: 0
    max_value: 23
    step: 1
    mode: box 

  - platform: template
    name:  "${device_verbose_name}_minutes_5"
    id: number_minutes_5
    unit_of_measurement: m
    icon: mdi:clock-time-one 
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 13;
              id(cansel).turn_on();
            }      
    min_value: 0
    max_value: 59
    step: 1 
    mode: box
     
  - platform: template
    name: "${device_verbose_name}_temperature_5"
    id: number_temperature_5
    unit_of_measurement: °C
    icon: mdi:thermometer-auto 
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 14;
              id(cansel).turn_on();
            }      
    min_value: 1
    max_value: 70
    step: 1 
    mode: box 
    
  - platform: template
    name: "${device_verbose_name}_hour_6"
    id: number_hour_6
    unit_of_measurement: h
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {;
              sending_sensor_raw = 15;
              id(cansel).turn_on();
            }      
    min_value: 0
    max_value: 23
    step: 1 
    mode: box
    
  - platform: template
    name: "${device_verbose_name}_minutes_6"
    id: number_minutes_6
    unit_of_measurement: m
    icon: mdi:clock-time-one
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 16;
              id(cansel).turn_on();
            }     
    min_value: 0
    max_value: 59
    step: 1 
    mode: box  
    
  - platform: template
    name: "${device_verbose_name}_temperature_6"
    id: number_temperature_6
    unit_of_measurement: °C
    icon: mdi:thermometer-auto
    update_interval: never
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value() && (id(wor_points).state || id(week_points).state)) {
              sending_sensor_raw = 17;
              id(cansel).turn_on();
            }   
    min_value: 1
    max_value: 70
    step: 1 
    mode: box  
 
 
select:    
  - platform: template
    name: "${device_verbose_name}_mode"
    id: options_mode
    icon: mdi:cog-refresh
    options:
      - "Manual"
      - "Program"
      - "Holiday" 
      - "TempProg"
    optimistic: true
    update_interval: never
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 4;
              if (x == "Holiday") {
                sending.valueapi = 2;
              } else {
                sending.valueapi = 0;
              }
              sending_enum = sending;
            } else {
              reception.reset();
            }

  - platform: template
    name: "${device_verbose_name}_options_control"
    id: options_control
    options:
      - "built-in"
      - "external"
      - "built-in_external" 
    optimistic: true 
    update_interval: never
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 116;
              auto index = id(options_control).active_index();
              sending.valueapi = index.value();
              sending_enum = sending;
            } else {
              reception.reset();
            }  
    
  - platform: template
    name: "${device_verbose_name}_turn_on_state"
    id: turn_on_state
    options:
      - "same state"
      - "off state"
      - "on state"
    optimistic: true
    update_interval: never
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 117;
              auto index = id(turn_on_state).active_index();
              sending.valueapi = index.value();
              sending_enum = sending;
            } else {
              reception.reset();
            }    
              
  - platform: template
    name: "${device_verbose_name}_select_week"
    id: select_week
    icon: mdi:calendar-month
    options:
      - "5+2/2"
      - "6+1/1"
      - "7 days"   
    optimistic: true  
    update_interval: never
    on_value:
      then:
        - lambda: |-
            if (!reception.has_value()) {
              sending.datapointapi = 118;
              auto index = id(select_week).active_index();
              sending.valueapi = index.value();
              sending_enum = sending;
            } else {
              reception.reset();
            }     
            
        
sensor:    
  - platform: wifi_signal
    name: "${device_verbose_name}_wifi"
    
  - platform: uptime
    name: "${device_verbose_name}_uptime"
    
  - platform: adc
    pin: VCC
    name: "${device_verbose_name}_voltage_ESP"
    
  - platform: template
    name: "${device_verbose_name}_external_temperature"
    id: sensor_external
    accuracy_decimals: 1
    unit_of_measurement: °C
    icon: mdi:thermometer
    device_class: temperature
    state_class: "measurement" 
    update_interval: never 
    
    
switch:
  - platform: custom
    lambda: |-
      auto power = new MyCustomSwitch(0);
      App.register_component(power);   
      auto lock = new MyCustomSwitch(1);
      App.register_component(lock);
      auto switch_low_protection = new MyCustomSwitch(2);
      App.register_component(switch_low_protection);      
      auto switch_high_protection = new MyCustomSwitch(3);
      App.register_component(switch_high_protection);
      auto setting = new MyCustomSwitch(4);
      App.register_component(setting); 
      auto setting_points = new MyCustomSwitch(5);
      App.register_component(setting_points); 
      auto wor_points = new MyCustomSwitch(6);
      App.register_component(wor_points);
      auto week_points = new MyCustomSwitch(7);
      App.register_component(week_points); 
      auto save = new MyCustomSwitch(8);
      App.register_component(save);     
      auto cansel = new MyCustomSwitch(9);
      App.register_component(cansel); 
      return {power, lock, switch_low_protection, switch_high_protection, setting, setting_points, 
              wor_points, week_points, save, cansel};

    switches:
    - name: "${device_verbose_name}_power"
      id: power
      icon: mdi:power-standby    
    - name: "${device_verbose_name}_lock"
      id: lock
      icon: mdi:lock 
    - name: "${device_verbose_name}_low_protection"
      id: switch_low_protection
      icon: mdi:radiator        
    - name: "${device_verbose_name}_high_protection"
      id: switch_high_protection
      icon: mdi:radiator-off 
    - name: "${device_verbose_name}_setting " 
      id: setting
      icon: mdi:cog-sync 
    - name: "${device_verbose_name}_setting_points" 
      id: setting_points 
      icon: mdi:timer-cog   
    - name: "${device_verbose_name}_wor_points" 
      id: wor_points
      icon: mdi:calendar-week
    - name: "${device_verbose_name}_week_points" 
      id: week_points
      icon: mdi:calendar-weekend     
    - name: "${device_verbose_name}_save"
      id: save
      icon: mdi:tray-arrow-up 
    - name: "${device_verbose_name}_cansel"
      id: cansel
      icon: mdi:tray-remove  
    
    
  - platform: safe_mode
    name: "${device_verbose_name}_restart_safe_mode" 

 # - platform: restart
  #  name: "${device_verbose_name}_restart" 
    
    
time:
  - platform: homeassistant
    id: homeassistant_time
    
    
text_sensor:  
  - platform: version
    name: "${device_verbose_name}_version"  
    
  - platform: template
    name: "${device_verbose_name}_error"
    id: error
    icon: mdi:alert-outline 
    update_interval: never   